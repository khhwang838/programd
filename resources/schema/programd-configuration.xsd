<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://aitools.org/programd/4.7/programd-configuration"
  xmlns:d="http://aitools.org/programd/4.7" xmlns:sch="http://www.ascc.net/xml/schematron"
  targetNamespace="http://aitools.org/programd/4.7/programd-configuration" elementFormDefault="qualified" attributeFormDefault="unqualified"
  version="1.0" xml:lang="EN">
  <xs:annotation>
    <xs:documentation> This is the schema for the Program D configuration file (often named core.xml). </xs:documentation>
    <xs:appinfo>
      <d:settings-classes>
        <d:base-class>
          <d:classname>org.aitools.programd.CoreSettings</d:classname>
          <d:filename>../../src/org/aitools/programd/CoreSettings.java</d:filename>
        </d:base-class>
        <d:programmatic-class>
          <d:classname>org.aitools.programd.ProgrammaticCoreSettings</d:classname>
          <d:filename>../../src/org/aitools/programd/ProgrammaticCoreSettings.java</d:filename>
        </d:programmatic-class>
        <d:xml-class>
          <d:classname>org.aitools.programd.XMLCoreSettings</d:classname>
          <d:filename>../../src/org/aitools/programd/XMLCoreSettings.java</d:filename>
        </d:xml-class>
      </d:settings-classes>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="programd">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="aiml.namespace-uri" type="xs:anyURI" default="http://alicebot.org/2001/AIML-1.0.1">
          <xs:annotation>
            <xs:documentation>The namespace URI of AIML to use.</xs:documentation>
            <xs:appinfo>
              <d:property-name>AIMLNamespaceURI</d:property-name>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="paths">
          <xs:annotation>
            <xs:documentation>Paths to other files used in configuring/running Program D.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="bot-config" type="URL">
                <xs:annotation>
                  <xs:documentation>The bot configuration file.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>botConfigURL</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="plugin-config" type="URL">
                <xs:annotation>
                  <xs:documentation>Configuration file for plugins.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>pluginConfigURL</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="gossip" type="URL">
                <xs:annotation>
                  <xs:documentation> Where to write gossip entries. Gossip entries will be written like this: &lt;li&gt;the
                    gossip&lt;/li&gt; </xs:documentation>
                  <xs:appinfo>
                    <d:property-name>gossipURL</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="predicates">
          <xs:annotation>
            <xs:documentation>Configuration of predicates.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="empty-default" type="xs:string" default="undefined">
                <xs:annotation>
                  <xs:documentation>The default value for undefined predicates.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>predicateEmptyDefault</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="client-name-predicate" type="xs:string" default="name">
                <xs:annotation>
                  <xs:documentation>Which predicate contains the client's name.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>clientNamePredicate</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="bot-name-property" type="xs:string" default="name">
                <xs:annotation>
                  <xs:documentation>Which bot property contains the bot's name.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>botNameProperty</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="predicate-flush-period" type="xs:int" default="500">
                <xs:annotation>
                  <xs:documentation> The number of predicate set operations before flushing predicates to storage. </xs:documentation>
                  <xs:appinfo>
                    <d:property-name>predicateFlushPeriod</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="predicate-manager">
          <xs:annotation>
            <xs:documentation>Configuration of the PredicateManager.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="implementation" type="xs:string" default="org.aitools.programd.predicates.InMemoryPredicateManager">
                <xs:annotation>
                  <xs:documentation>The PredicateManager implementation to use.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>predicateManagerImplementation</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="ffpm-dir" type="URL" minOccurs="0">
                <xs:annotation>
                  <xs:documentation> The directory in which to save flat-file predicates (if the FlatFilePredicateManager is used). </xs:documentation>
                  <xs:appinfo>
                    <d:property-name>ffpmDirectory</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="database">
          <xs:annotation>
            <xs:documentation>Configuration of the database (if used).</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="driver" type="xs:string" default="com.mysql.jdbc.Driver">
                <xs:annotation>
                  <xs:documentation>The database driver to use.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>databaseDriver</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="uri" type="xs:string" default="programd">
                <xs:annotation>
                  <xs:documentation>The JDBC connection URI to use (driver-specific).</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>databaseURI</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="username" type="xs:string" default="yourusername">
                <xs:annotation>
                  <xs:documentation>The username for accessing the database.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>databaseUsername</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="password" type="xs:string" default="yourpassword">
                <xs:annotation>
                  <xs:documentation>The password for accessing the database.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>databasePassword</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="min-idle" type="xs:int" default="30">
                <xs:annotation>
                  <xs:documentation>The minimum number of number of database connections allowed in the pool before new objects are created.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>databaseMinIdle</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="max-active" type="xs:int" default="70">
                <xs:annotation>
                  <xs:documentation>The maximum number of database connections that can be allocated at a time.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>databaseMaxActive</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="merge">
          <xs:annotation>
            <xs:documentation>Configuration of the merge behavior of Program D (handling duplicate category paths).</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="policy" type="MergePolicy" default="combine">
                <xs:annotation>
                  <xs:documentation> What to do when a category is loaded whose pattern:that:topic path is identical to one already loaded
                    (for the same bot). </xs:documentation>
                  <xs:appinfo>
                    <d:property-name>mergePolicy</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="note-each" type="xs:boolean" default="true">
                <xs:annotation>
                  <xs:documentation>Produce a note in the console/log for each merge?</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>noteEachMerge</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="append-policy.separator-string" type="xs:string" default=" ">
                <xs:annotation>
                  <xs:documentation> If the append merge policy is used, what text content (if any) should be inserted between the contents
                    of the two templates? (The default value is a space.) </xs:documentation>
                  <xs:appinfo>
                    <d:property-name>appendMergeSeparatorString</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="exceptions">
          <xs:annotation>
            <xs:documentation>Handling of unusual situations, errors or exceptions.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="response-timeout" type="xs:int" default="1000">
                <xs:annotation>
                  <xs:documentation> The maximum allowable time (in milliseconds) to get a response. </xs:documentation>
                  <xs:appinfo>
                    <d:property-name>responseTimeout</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="infinite-loop-input" type="xs:string" default="INFINITE LOOP">
                <xs:annotation>
                  <xs:documentation>The input to match if an infinite loop is found.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>infiniteLoopInput</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="on-uncaught-exceptions.print-stack-trace" type="xs:boolean" default="true">
                <xs:annotation>
                  <xs:documentation>Whether to print a stack trace on uncaught exceptions.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>printStackTraceOnUncaughtExceptions</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="heart">
          <xs:annotation>
            <xs:documentation> The heart can beat and let you know the bot is alive. Right now the only kind of pulse is a message "I'm
              alive!" printed to the console. You can write a "Pulse" that can do something more useful, like ping a server.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="pulse.implementation" type="xs:string" default="org.aitools.programd.util.IAmAlivePulse">
                <xs:annotation>
                  <xs:documentation>The Pulse implementation to use.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>pulseImplementation</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="pulse.rate" type="xs:int" default="5">
                <xs:annotation>
                  <xs:documentation>The pulse rate for the heart (beats per minute).</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>heartPulseRate</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="enabled" type="xs:boolean" use="required">
              <xs:annotation>
                <xs:documentation>Enable the heart?</xs:documentation>
                <xs:appinfo>
                  <d:property-name>heartEnabled</d:property-name>
                </xs:appinfo>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="watchers">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="AIML">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="timer" type="xs:int" default="2000">
                      <xs:annotation>
                        <xs:documentation>The delay period when checking changed AIML (milliseconds).</xs:documentation>
                        <xs:appinfo>
                          <d:property-name>AIMLWatcherTimer</d:property-name>
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="enabled" type="xs:boolean" use="required">
                    <xs:annotation>
                      <xs:documentation>Use the AIML watcher?</xs:documentation>
                      <xs:appinfo>
                        <d:property-name>useAIMLWatcher</d:property-name>
                      </xs:appinfo>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="interpreters">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="javascript">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="interpreter-classname" type="xs:string" default="org.aitools.programd.interpreter.RhinoInterpreter">
                      <xs:annotation>
                        <xs:documentation>The JavaScript interpreter.</xs:documentation>
                        <xs:appinfo>
                          <d:property-name>javascriptInterpreterClassname</d:property-name>
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="allowed" type="xs:boolean" use="required">
                    <xs:annotation>
                      <xs:documentation>Allow the use of JavaScript?</xs:documentation>
                      <xs:appinfo>
                        <d:property-name>allowJavaScript</d:property-name>
                      </xs:appinfo>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="system">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="directory" type="URL" default="..">
                      <xs:annotation>
                        <xs:documentation>The directory in which to execute &lt;system/&gt; element contents.</xs:documentation>
                        <xs:appinfo>
                          <d:property-name>systemInterpreterDirectory</d:property-name>
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="prefix" type="xs:string" default="">
                      <xs:annotation>
                        <xs:documentation>The string to prepend to all &lt;system/&gt; calls (platform-specific). Windows requires
                          something like "cmd /c "; Linux doesn't (just leave empty).</xs:documentation>
                        <xs:appinfo>
                          <d:property-name>systemInterpreterPrefix</d:property-name>
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="allowed" type="xs:boolean" use="required">
                    <xs:annotation>
                      <xs:documentation>Allow access to the OS via the system element?</xs:documentation>
                      <xs:appinfo>
                        <d:property-name>allowOSAccess</d:property-name>
                      </xs:appinfo>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="loading">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="category-load-notification-interval" type="xs:int" default="1000">
                <xs:annotation>
                  <xs:documentation>How frequently (in categories) to notify as categories are being loaded.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>categoryLoadNotificationInterval</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="note-each-loaded-file" type="xs:boolean" default="false">
                <xs:annotation>
                  <xs:documentation>Produce a notification message for each file that is loaded.</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>noteEachLoadedFile</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="exit-immediately-on-startup" type="xs:boolean" default="false">
                <xs:annotation>
                  <xs:documentation>After all bots have been loaded, exit immediately (useful for timing).</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>exitImmediatelyOnStartup</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="connect-string" type="xs:string" default="connect">
          <xs:annotation>
            <xs:documentation> The string to send when first connecting to the bot. If this value is empty, no value will be sent. </xs:documentation>
            <xs:appinfo>
              <d:property-name>connectString</d:property-name>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="random-strategy" type="RandomStrategy" default="non-repeating">
          <xs:annotation>
            <xs:documentation> How to interpret random elements. </xs:documentation>
            <xs:appinfo>
              <d:property-name>randomStrategy</d:property-name>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="graphmapper.implementation" type="xs:string" default="org.aitools.programd.graph.MemoryGraphmapper">
          <xs:annotation>
            <xs:documentation>The Graphmapper implementation to use.</xs:documentation>
            <xs:appinfo>
              <d:property-name>graphmapperImplementation</d:property-name>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="nodemapper.implementation" type="xs:string" default="org.aitools.programd.graph.TwoOptimalMemoryNodemapper">
          <xs:annotation>
            <xs:documentation>The Nodemapper implementation to use.</xs:documentation>
            <xs:appinfo>
              <d:property-name>nodemapperImplementation</d:property-name>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="reset-graph" type="xs:boolean" default="true" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Reset the graph on startup?  (Only applies to Graphmappers with persistent storage.)</xs:documentation>
            <xs:appinfo>
              <d:property-name>resetGraph</d:property-name>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="use-shell" type="xs:boolean" default="true">
          <xs:annotation>
            <xs:documentation>Use interactive command-line shell?</xs:documentation>
            <xs:appinfo>
              <d:property-name>useShell</d:property-name>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
			  <xs:element name="xml-parser">
			    <xs:annotation>
			      <xs:documentation>Configuration of the XML parser.</xs:documentation>
			    </xs:annotation>
			    <xs:complexType>
			      <xs:sequence>
              <xs:element name="catalog-path" type="xs:string" default="resources/catalog.xml">
                <xs:annotation>
                  <xs:documentation>Location of the XML catalog (relative to program directory)</xs:documentation>
                  <xs:appinfo>
                    <d:property-name>xmlCatalogPath</d:property-name>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
			      </xs:sequence>
			    </xs:complexType>
			  </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="URL">
    <xs:annotation>
      <xs:documentation> This might (or might not) be usefully restricted further than what xs:anyURI already does. </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI"/>
  </xs:simpleType>
  <xs:simpleType name="RandomStrategy">
    <xs:annotation>
      <xs:documentation> A strategy for randomly selecting elements. </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="pure-random">
        <xs:annotation>
          <xs:documentation> Each choice is made from the full set, randomly. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="non-repeating">
        <xs:annotation>
          <xs:documentation>A choice is not repeated until all others have been used.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MergePolicy">
    <xs:annotation>
      <xs:documentation> A strategy for handling situations when a category whose path matches that of an already-loaded category is
        encountered during loading. </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="skip">
        <xs:annotation>
          <xs:documentation> Leave the currently loaded template in place and ignore the new one. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="overwrite">
        <xs:annotation>
          <xs:documentation>Overwrite the loaded template with the new one.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="append">
        <xs:annotation>
          <xs:documentation> Append the content of the new template to the currently loaded one. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="combine">
        <xs:annotation>
          <xs:documentation> Store the new template as well, so it will have an equal chance of being used as the currently loaded one.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="JavascriptInterpreterImplementation">
    <xs:annotation>
      <xs:documentation>An implementation of JavascriptInterpreter available in Program D.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="org.aitools.programd.interpreter.RhinoInterpreter"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
